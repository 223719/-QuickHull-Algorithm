import matplotlib.pyplot as plt

def quick_hull(points):
    def find_side(p1, p2, p):
        val = (p[1] - p1[1]) * (p2[0] - p1[0]) - (p2[1] - p1[1]) * (p[0] - p1[0])
        if val > 0:
            return 1
        elif val < 0:
            return -1
        else:
            return 0

    def distance(p1, p2, p):
        return abs((p[1] - p1[1]) * (p2[0] - p1[0]) - (p2[1] - p1[1]) * (p[0] - p1[0]))

    def hull(p1, p2, points, side):
        index = -1
        max_dist = 0
        for i, p in enumerate(points):
            temp = distance(p1, p2, p)
            if find_side(p1, p2, p) == side and temp > max_dist:
                index = i
                max_dist = temp

        if index == -1:
            hull_points.append(p1)
            hull_points.append(p2)
            return

        hull(points[index], p1, points, -find_side(points[index], p1, p2))
        hull(points[index], p2, points, -find_side(points[index], p2, p1))

    if len(points) < 3:
        return points

    min_point = min(points, key=lambda p: p[0])
    max_point = max(points, key=lambda p: p[0])

    hull_points = []

    hull(min_point, max_point, points, 1)
    hull(min_point, max_point, points, -1)

    return list(set(hull_points))

# Test the quick_hull function
points = [(0, 3), (2, 3), (1, 1), (2, 1), (3, 0), (0, 0), (3, 3)]
hull_points = quick_hull(points)

# Plotting the points and the convex hull
def plot_hull(points, hull_points):
    plt.scatter(*zip(*points), marker='o', color='blue', label='Points')
    for i in range(len(hull_points)):
        p1 = hull_points[i]
        p2 = hull_points[(i + 1) % len(hull_points)]
        plt.plot([p1[0], p2[0]], [p1[1], p2[1]], 'r-')
    plt.scatter(*zip(*hull_points), marker='x', color='red', label='Convex Hull Points')
    plt.legend()
    plt.show()

plot_hull(points, hull_points)
